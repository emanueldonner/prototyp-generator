---
import Layout from "../layouts/Layout.astro"
import Card from "../components/Card.astro"
import { componentList } from "../componentList"

import { templates, collections, patterns } from "../testdata"

const toggleState = true
---

<Layout title="Prototyp Generator">
  <main>
    <div class="main-container">
      <div class="parts-container">
        <div class="parts-container__header">
          <div class="info-button">I</div>
          <!-- button that toggles visibility of parts-container -->
          <div class="toggle-class"><span class="burger"></span></div>

          <!-- <div class="parts-container__header__search">
            <input type="text" placeholder="Search" value="" />

            <button> Suchen</button>
          </div> -->
        </div>

        <div class="parts-container__body">
          <div class="parts-section section-templates">
            <wm-toggle full open="true">
              <span slot="label">Vorlagen</span>

              <div slot="content" class="parts-section__body" id="templates">
                {
                  templates.map((template) => (
                    <div
                      data-id={template.name}
                      data-type="template"
                      data-id={template.id}
                    >
                      <Card title={template.title} icon={template.icon} />
                    </div>
                  ))
                }
              </div>
            </wm-toggle>
          </div>

          <div class="parts-section section-collections">
            <wm-toggle full open="true">
              <span slot="label">Kollektionen</span>

              <div slot="content" class="parts-section__body" id="collections">
                {
                  collections.map((collection) => (
                    <div
                      data-type="collection"
                      data-type="collection"
                      data-id={collection.id}
                    >
                      <Card title={collection.title} icon={collection.icon} />
                    </div>
                  ))
                }
              </div>
            </wm-toggle>
          </div>
          <div class="parts-section section-patters">
            <wm-toggle full open="true">
              <span slot="label">Patterns</span>

              <div slot="content" class="parts-section__body" id="patterns">
                {
                  componentList.map((pattern) => (
                    <div
                      data-type="pattern"
                      data-id={pattern.name}
                      data-tag={pattern.tag}
                    >
                      <Card title={pattern.title} icon="dashboard" />
                    </div>
                  ))
                }
              </div>
            </wm-toggle>
          </div>
        </div>
      </div>
      <div class="build-container"></div>
      <div class="settings-container"></div>
    </div>
  </main>
</Layout>

<script>
  import Sortable from "sortablejs"
  import FirstTemplate from "../components/templates/FirstTemplate.astro"
  const patternsContainer = document.getElementById("patterns")
  const templatesContainer = document.getElementById("templates")
  const collectionsContainer = document.getElementById("collections")
  const buildContainer = document.querySelector(".build-container")

  // Toggle class of parts-container
  const toggleClass = document.querySelector(".toggle-class")
  toggleClass.addEventListener("click", () => {
    const partsContainer = document.querySelector(".parts-container")
    partsContainer.classList.toggle("minimized")
  })

  const groupOptions = {
    name: "shared",
    pull: "clone",
    put: false,
  }

  const dndOptions = {
    group: groupOptions,
    sort: false,
    animation: 150,
    onAdd: function (event) {
      replaceWithComponent(event.item)
    },
  }

  const buildOptions = {
    name: "build",
    pull: false,
    put: true,
  }

  const replaceWithComponent = (item) => {
    const tag = item.dataset.tag
    console.log("tag", tag)
    const type = item.dataset.type

    // const component = [type].find((item) => item.id === id)
    const component = FirstTemplate

    const newElement = document.createElement(tag)

    newElement.innerHTML = component

    item.parentNode.replaceChild(newElement, item)
  }

  Sortable.create(patternsContainer, dndOptions)

  new Sortable(templatesContainer, dndOptions)

  new Sortable(collectionsContainer, dndOptions)

  new Sortable(buildContainer, {
    group: buildOptions,
    animation: 150,
    ghostClass: "sortable-ghost",
    onAdd: function (event) {
      replaceWithComponent(event.item)
    },
  })
</script>

<style>
  .main-container {
    background: aquamarine;
    width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .toggle-class {
    position: absolute;
    right: 2rem;
    top: 0.5rem;
    width: 26px;
    height: 26px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    background: transparent;
    border: 5px solid transparent;
    border-radius: 50%;
    transition: all 0.3s ease;
    .burger,
    .burger::before,
    .burger::after {
      content: "";
      position: absolute;
      height: 2px;
      width: 100%;
      background: #555;
      transition: all 0.3s ease;
    }

    .burger {
      background: transparent;
    }
    .burger::before {
      transform: translateY(0) rotate(45deg);
    }
    .burger::after {
      transform: translateY(0) rotate(-45deg);
    }
  }
  .parts-container {
    position: relative;
    width: 360px;
    height: 100%;
    background: #fff;
    display: flex;
    flex-direction: column;
    transition: width 0.3s ease;
  }
  .parts-container.minimized {
    width: 0px;

    .toggle-class {
      transform: translateX(4.5rem);
      background: aqua;
      border: 5px solid aqua;
      opacity: 0.5;
      /* box-shadow: 0 2px 3px rgba(0, 0, 0, 0.3); */
    }
    .toggle-class:hover {
      opacity: 1;
    }
    .burger::before {
      transform: translateY(-3px);
    }

    .burger::after {
      transform: translateY(3px);
    }
    .parts-container__body {
      display: none;
    }
  }
  .build-container {
    background: grey;
    flex-grow: 1;
    height: 100%;
  }

  .settings-container {
    width: 240px;
    background: lightgrey;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .parts-container__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2px;
    height: 30px;
  }
  .parts-container__header__search {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 40px;
  }

  .parts-container__body {
    padding: 0.4rem 1rem 1rem;
    flex-grow: 1;
    overflow-y: scroll;
    margin: 0.5rem 0;
  }

  .parts-section {
    margin-bottom: 1rem;
  }
  .parts-section__body {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 0.7rem;
    /* margin: 0.5rem 0; */
  }
  .sortable-ghost {
    height: 200px;
    /* width: 200px; */
    border: 1px dashed #000; // an outline to indicate the size of the component
  }
</style>
