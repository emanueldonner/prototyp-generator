---
import Layout from "../layouts/Layout.astro"
import BuildContainer from "../components/BuildContainer/BuildContainer.jsx"

const itemConfigs = await Astro.glob("../../public/blocks/**/*.md")

const configObj = itemConfigs.reduce((obj, item) => {
  obj[item.frontmatter.token] = item.frontmatter
  return obj
}, {})

const toggleState = true
---

<Layout title="Prototyp Generator">
  <main>
    <BuildContainer client:load />
  </main>
</Layout>

<!-- <script>
  import Sortable from "sortablejs"
  const patternsContainer = document.getElementById("patterns")
  const templatesContainer = document.getElementById("templates")
  const collectionsContainer = document.getElementById("collections")
  const buildContainer = document.querySelector(".build-container")

  import { dropRules } from "../drop_rules"
  // Toggle class of parts-container
  const toggleClass = document.querySelector(".toggle-class")
  toggleClass.addEventListener("click", () => {
    const partsContainer = document.querySelector(".parts-container")
    partsContainer.classList.toggle("minimized")
  })

  function canDrop(itemId, targetListId) {
    // Get the rule for this item type
    const rule = dropRules[itemId]
    console.log("rule:", rule)

    // If no rule is defined for this item, let's be permissive and allow the drop
    if (!rule) {
      return true
    }

    // If the target list is the 'buildContainer' and 'main' is not a permitted parent, disallow drop
    if (targetListId === "canvas") {
      console.log("canvas")
      if (rule.parents.includes("main")) {
        return true
      } else {
        return false
      }
    }
    console.log("cannot drop here")

    // If the rule has a 'parents' field, check that the target list type is allowed
    if (rule.parents && !rule.parents.includes(targetListId)) {
      return false
    }

    // If the rule has a 'limit' field, check that the target list does not already contain the maximum number of items of this type
    if (rule.limit) {
      const numExistingItems = document.querySelectorAll(
        `[data-id=${itemId}]`
      ).length
      if (numExistingItems >= rule.limit) {
        return false
      }
    }

    // If none of the checks failed, the drop is allowed
    return true
  }

  function onStart(evt) {
    evt.item.dataset.type = evt.item.getAttribute("data-component-type")
  }

  function onEnd(evt) {
    evt.item.classList.remove("can-drop", "cannot-drop")
  }

  function onAdd(event) {
    replaceWithComponent(event.item)
  }

  function onSort(evt) {
    const itemType = evt.item.dataset.ptype
    const listType = evt.to.dataset.ptype

    if (!canDrop(itemType, listType)) {
      Sortable.active.sortable.cancel()
    }
  }
  function onMove(evt) {
    const itemId = evt.dragged.dataset.id
    const targetListId = evt.to.dataset.id
    console.log("targetListId:", targetListId)

    if (!canDrop(itemId, targetListId)) {
      evt.dragged.classList.add("cannot-drop")
      return false // This will prevent the sort operation.
    } else {
      evt.dragged.classList.add("can-drop")
    }
  }

  const groupOptions = {
    name: "shared",
    pull: "clone",
    put: false,
  }

  const dndOptions = {
    group: groupOptions,
    sort: false,
    animation: 150,
    fallbackOnBody: true,
    swapThreshold: 0.65,
    onStart,
    onEnd,
    onAdd,
    onSort,
    onMove,
  }

  const buildOptions = {
    name: "build",
    pull: false,
    put: true,
    fallbackOnBody: true,
    swapThreshold: 0.65,
    onStart,
    onEnd,
    onAdd,
    onSort,
    onMove,
  }

  const replaceWithComponent = (item) => {
    const tag = item.dataset.tag
    const ptype = item.dataset.ptype
    const id = item.dataset.id
    console.log(item, id, ptype, tag)

    const newElement = document.createElement("div")
    newElement.dataset.ptype = ptype
    newElement.dataset.tag = tag
    newElement.classList.add("sortable-list")
    // Create a unique id based on the old id and a timestamp
    newElement.id = `sortable-list-${id}-${Date.now()}`

    // Add sortable properties to the new element
    new Sortable(newElement, {
      group: buildOptions,
      animation: 150,
      ghostClass: "sortable-ghost",
      fallbackOnBody: true,
      swapThreshold: 0.65,
      onAdd: function (event) {
        replaceWithComponent(event.item)
      },
      onMove: function (evt, originalEvent) {
        return canDrop(evt.dragged.dataset.id, evt.to.id)
      },
    })

    // fetch .html file content and add it to the new element
    fetch(`/blocks/1-${ptype}/${id}/code.html`)
      .then((response) => response.text())
      .then((data) => {
        console.log("data", data)
        newElement.innerHTML = data
        item.parentNode.replaceChild(newElement, item)
      })
  }

  Sortable.create(patternsContainer, dndOptions)

  new Sortable(templatesContainer, dndOptions)

  new Sortable(collectionsContainer, dndOptions)

  new Sortable(buildContainer, {
    group: buildOptions,
    animation: 150,
    ghostClass: "sortable-ghost",
    onAdd: function (event) {
      replaceWithComponent(event.item)
    },
  })
</script> -->
