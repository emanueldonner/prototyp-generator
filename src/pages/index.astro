---
import Layout from "../layouts/Layout.astro"
import Card from "../components/Card.astro"

import { templates, collections, patterns } from "../testdata"
---

<Layout title="Prototyp Generator">
  <main>
    <div class="main-container">
      <div class="parts-container">
        <div class="parts-container__header">
          <div class="parts-container__header__search">
            <input type="text" placeholder="Search" />

            <button>
              Suchen
              <!-- <img src="assets/img/search.svg" alt="search" /> -->
            </button>
          </div>
        </div>

        <div class="parts-container__body">
          <div class="parts-section section-templates">
            <h3>Vorlagen</h3>

            <div class="parts-section__body" id="templates">
              {
                templates.map((template) => (
                  <Card
                    data-type="template"
                    data-id={template.id}
                    title={template.title}
                    icon={template.icon}
                  />
                ))
              }
            </div>
          </div>

          <div class="parts-section section-collections">
            <h3>Kollektionen</h3>

            <div class="parts-section__body" id="collections">
              {
                collections.map((collection) => (
                  <Card
                    data-type="collection"
                    data-id={collection.id}
                    title={collection.title}
                    icon={collection.icon}
                  />
                ))
              }
            </div>
          </div>
          <div class="parts-section section-patters">
            <h3>Patterns</h3>

            <div class="parts-section__body" id="patterns">
              {
                patterns.map((pattern) => (
                  <Card
                    data-type="pattern"
                    data-id={pattern.id}
                    title={pattern.title}
                    icon={pattern.icon}
                  />
                ))
              }
            </div>
          </div>
        </div>
      </div>
      <div class="build-container"></div>
      <div class="settings-container"></div>
    </div>
  </main>
</Layout>

<script>
  import Sortable from "sortablejs"
  import FirstTemplate from "../components/templates/FirstTemplate.astro"
  const patternsContainer = document.getElementById("patterns")
  const templatesContainer = document.getElementById("templates")
  const collectionsContainer = document.getElementById("collections")
  const buildContainer = document.querySelector(".build-container")

  const groupOptions = {
    name: "shared",
    pull: "clone",
    put: false,
  }

  const dndOptions = {
    group: groupOptions,
    sort: false,
    animation: 150,
    onAdd: function (event) {
      replaceWithComponent(event.item)
    },
  }

  const buildOptions = {
    name: "build",
    pull: false,
    put: true,
  }

  const replaceWithComponent = (item) => {
    const id = item.dataset.id
    const type = item.dataset.type

    // const component = [type].find((item) => item.id === id)
    const component = FirstTemplate

    const newElement = document.createElement("FirstTemplate")

    // newElement.appendChild(component)

    item.parentNode.replaceChild(newElement, item)
  }

  Sortable.create(patternsContainer, {
    dndOptions,
  })

  new Sortable(templatesContainer, {
    group: groupOptions,
    onAdd: function (event) {
      replaceWithComponent(event.item)
    },
  })

  new Sortable(collectionsContainer, {
    group: groupOptions,
    onAdd: function (event) {
      replaceWithComponent(event.item)
    },
  })

  new Sortable(buildContainer, {
    group: buildOptions,
    animation: 150,
    ghostClass: "sortable-ghost",
    onAdd: function (event) {
      replaceWithComponent(event.item)
    },
  })
</script>

<style>
  .main-container {
    background: aquamarine;
    width: 100%;
    height: 100vh;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .parts-container {
    width: 360px;
    height: 100%;
    background: #fff;
    display: flex;
    flex-direction: column;
  }

  .build-container {
    background: grey;
    flex-grow: 1;
    height: 100%;
  }

  .settings-container {
    width: 240px;
    background: lightgrey;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .parts-container__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid #eee;
  }
  .parts-container__header__search {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 40px;
    background: #eee;
    border-radius: 5px;
  }
  .parts-container__header__search input {
    width: 100%;
    height: 100%;
    border: none;
    outline: none;
    padding: 0 1rem;
    font-size: 1rem;
    background: transparent;
  }
  .parts-container__header__search input::placeholder {
    color: #999;
  }
  .parts-container__header__search button {
    border: none;
    outline: none;
    background: transparent;
    cursor: pointer;
    padding: 0 1rem;
  }

  .parts-container__body {
    padding: 1rem;
    flex-grow: 1;
    overflow-y: scroll;
  }

  .parts-section__body {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-gap: 0.7rem;
  }
  .sortable-ghost {
    height: 200px;
    /* width: 200px; */
    border: 1px dashed #000; // an outline to indicate the size of the component
  }
</style>
